import { z } from 'zod/v4';

const operationMode = z.enum(['off', 'always', 'fallback']);

export const searchParams = z
  .object({
    q: z.string(),
    query_by: z.string().or(z.array(z.string())),
    query_by_weights: z.string().or(z.array(z.number())),
    prefix: z.string().or(z.boolean()).or(z.array(z.boolean())),
    filter_by: z.string(),
    max_filter_by_candidates: z.number(),
    enable_synonyms: z.boolean(),
    enable_analytics: z.boolean(),
    filter_curated_hits: z.boolean(),
    enable_lazy_filter: z.boolean(),
    sort_by: z.string().or(z.array(z.string())),
    facet_by: z.string().or(z.array(z.string())),
    max_facet_values: z.number(),
    facet_sample_threshold: z.number(),
    facet_sample_percent: z.number(),
    facet_query: z.string(),
    facet_query_num_typos: z.number(),
    facet_return_parent: z.string(),
    facet_strategy: z.enum(['exhaustive', 'top_values', 'automatic']),
    page: z.number(),
    per_page: z.number(),
    group_by: z.string().or(z.array(z.string())),
    group_limit: z.number(),
    group_missing_values: z.boolean(),
    include_fields: z.string().or(z.array(z.string())),
    exclude_fields: z.string().or(z.array(z.string())),
    highlight_fields: z.string().or(z.array(z.string())),
    highlight_full_fields: z.string().or(z.array(z.string())),
    highlight_affix_num_tokens: z.number(),
    highlight_start_tag: z.string(),
    highlight_end_tag: z.string(),
    enable_highlight_v1: z.boolean(),
    snippet_threshold: z.number(),
    num_typos: z.string().or(z.number()).or(z.array(z.number())),
    min_len_1typo: z.number(),
    min_len_2typo: z.number(),
    split_join_tokens: operationMode,
    exhaustive_search: z.boolean(),
    drop_tokens_threshold: z.number(),
    drop_tokens_mode: z.enum([
      'right_to_left',
      'left_to_right',
      'both_sides:3',
    ]),
    typo_tokens_threshold: z.number(),
    pinned_hits: z.string().or(z.array(z.string())),
    hidden_hits: z.string().or(z.array(z.string())),
    limit_hits: z.number(),
    pre_segmented_query: z.boolean(),
    enable_overrides: z.boolean(),
    override_tags: z.string().or(z.array(z.string())),
    prioritize_exact_match: z.boolean(),
    prioritize_token_position: z.boolean(),
    prioritize_num_matching_fields: z.boolean(),
    search_cutoff_ms: z.number(),
    use_cache: z.boolean(),
    max_candidates: z.number(),
    infix: operationMode.or(z.array(operationMode)),
    preset: z.string(),
    text_match_type: z.enum(['max_score', 'max_weight']),
    vector_query: z.string(),
    'x-typesense-api-key': z.string(),
    'x-typesense-user-id': z.string(),
    offset: z.number(),
    limit: z.number(),
    stopwords: z.string(),
    conversation: z.boolean(),
    conversation_model_id: z.string(),
    conversation_id: z.string(),
    voice_query: z.string(),
  })
  .partial();

export const multiSearchRequestSchema = searchParams.extend({
  collection: z.string().optional(),
  rerank_hybrid_matches: z.boolean().optional(),
  'x-typesense-api-key': z.string().optional(),
});
