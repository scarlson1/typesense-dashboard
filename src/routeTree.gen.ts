/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardKeysRouteImport } from './routes/_dashboard/keys'
import { Route as DashboardAliasRouteImport } from './routes/_dashboard/alias'
import { Route as DashboardCollectionsIndexRouteImport } from './routes/_dashboard/collections/index'
import { Route as DashboardCollectionsNewRouteImport } from './routes/_dashboard/collections/new'
import { Route as DashboardCollectionsCollectionIdRouteImport } from './routes/_dashboard/collections/$collectionId'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardKeysRoute = DashboardKeysRouteImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAliasRoute = DashboardAliasRouteImport.update({
  id: '/alias',
  path: '/alias',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCollectionsIndexRoute =
  DashboardCollectionsIndexRouteImport.update({
    id: '/collections/',
    path: '/collections/',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardCollectionsNewRoute = DashboardCollectionsNewRouteImport.update({
  id: '/collections/new',
  path: '/collections/new',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCollectionsCollectionIdRoute =
  DashboardCollectionsCollectionIdRouteImport.update({
    id: '/collections/$collectionId',
    path: '/collections/$collectionId',
    getParentRoute: () => DashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/alias': typeof DashboardAliasRoute
  '/keys': typeof DashboardKeysRoute
  '/': typeof DashboardIndexRoute
  '/collections/$collectionId': typeof DashboardCollectionsCollectionIdRoute
  '/collections/new': typeof DashboardCollectionsNewRoute
  '/collections': typeof DashboardCollectionsIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/alias': typeof DashboardAliasRoute
  '/keys': typeof DashboardKeysRoute
  '/': typeof DashboardIndexRoute
  '/collections/$collectionId': typeof DashboardCollectionsCollectionIdRoute
  '/collections/new': typeof DashboardCollectionsNewRoute
  '/collections': typeof DashboardCollectionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteWithChildren
  '/auth': typeof AuthRoute
  '/_dashboard/alias': typeof DashboardAliasRoute
  '/_dashboard/keys': typeof DashboardKeysRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/collections/$collectionId': typeof DashboardCollectionsCollectionIdRoute
  '/_dashboard/collections/new': typeof DashboardCollectionsNewRoute
  '/_dashboard/collections/': typeof DashboardCollectionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/alias'
    | '/keys'
    | '/'
    | '/collections/$collectionId'
    | '/collections/new'
    | '/collections'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/alias'
    | '/keys'
    | '/'
    | '/collections/$collectionId'
    | '/collections/new'
    | '/collections'
  id:
    | '__root__'
    | '/_dashboard'
    | '/auth'
    | '/_dashboard/alias'
    | '/_dashboard/keys'
    | '/_dashboard/'
    | '/_dashboard/collections/$collectionId'
    | '/_dashboard/collections/new'
    | '/_dashboard/collections/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/keys': {
      id: '/_dashboard/keys'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof DashboardKeysRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/alias': {
      id: '/_dashboard/alias'
      path: '/alias'
      fullPath: '/alias'
      preLoaderRoute: typeof DashboardAliasRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/collections/': {
      id: '/_dashboard/collections/'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof DashboardCollectionsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/collections/new': {
      id: '/_dashboard/collections/new'
      path: '/collections/new'
      fullPath: '/collections/new'
      preLoaderRoute: typeof DashboardCollectionsNewRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/collections/$collectionId': {
      id: '/_dashboard/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof DashboardCollectionsCollectionIdRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardAliasRoute: typeof DashboardAliasRoute
  DashboardKeysRoute: typeof DashboardKeysRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardCollectionsCollectionIdRoute: typeof DashboardCollectionsCollectionIdRoute
  DashboardCollectionsNewRoute: typeof DashboardCollectionsNewRoute
  DashboardCollectionsIndexRoute: typeof DashboardCollectionsIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAliasRoute: DashboardAliasRoute,
  DashboardKeysRoute: DashboardKeysRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardCollectionsCollectionIdRoute: DashboardCollectionsCollectionIdRoute,
  DashboardCollectionsNewRoute: DashboardCollectionsNewRoute,
  DashboardCollectionsIndexRoute: DashboardCollectionsIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
